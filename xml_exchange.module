<?php

function xml_exchange_cron() {
    
}

function _xml_exchange_get_item_fields($item, $daddy = '') {
    if (is_object($item)) {
        $arr = get_object_vars($item);
    } elseif (is_array($item)) {
        $arr = $item;
    }
    else
        return $item;
    foreach ($arr AS $name => $value) {
        if (is_object($value) || is_array($value))
            $res = (!empty($res)) ? array_merge($res, _xml_exchange_get_item_fields($value, $name)) : _xml_exchange_get_item_fields($value, $name);
        else {
            $name = ($daddy) ? $daddy . '.' . $name : $name;
            $res[$name] = $name;
        }
    }
    return $res;
}

function _xml_exchange_get_data_from_item_field($item, $fname) {
    $item = (array) $item;
    if ($field = strstr($fname, '.', true)) {
        return _xml_exchange_get_data_from_item_field($item[$field], substr(strstr($fname, '.'), 1));
    }
    else
        return (!empty($item[$fname])) ? $item[$fname] : false;
}

function xml_exchange_load_feed($id) {
    if (!$id) {
        return false;
    }
    $feed = db_select('xml_exchange_loadings', 'x')
            ->fields('x')
            ->condition('id', $id, '=')
            ->execute()
            ->fetch();
    if (!$feed)
        return false;
    if (!$feed->scheme) {
        drupal_set_message(t('Need to fill up fields relations first'));
        drupal_goto('admin/content/xml_exchange/' . $id . '/edit');
        return false;
    }
}

/**
 * Implementation of hook_menu().
 */
function xml_exchange_menu() {
    $items['admin/content/xml_exchange'] = array(
        'title' => t('Xml exchange'),
        'access callback' => 'user_access',
        'access arguments' => array('access xml exchange'),
        'page callback' => 'xml_exchange_admin_content',
        'file' => 'includes/xml_exchange.admin.inc',
        'type' => MENU_NORMAL_ITEM
    );
    $items['admin/content/xml_exchange/add'] = array(
        'title' => t('Add xml feed'),
        'access callback' => 'user_access',
        'access arguments' => array('access xml exchange'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('xml_exchange_admin_add_feed'),
        'file' => 'includes/xml_exchange.admin.inc',
        'type' => MENU_NORMAL_ITEM
    );
    $items['admin/content/xml_exchange/%xml_exchange_menu'] = array(
        'title' => t('Execute'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('xml_exchange_admin_exec_feed_batch_form', 3),
        'access callback' => 'user_access',
        'access arguments' => array('access xml exchange'),
        'file' => 'includes/xml_exchange.admin.inc',
        'weight' => 1,
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    );
    $items['admin/content/xml_exchange/%xml_exchange_menu/exec'] = array(
        'title' => t('Execute'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('xml_exchange_admin_exec_feed_batch_form', 3),
        'access callback' => 'user_access',
        'access arguments' => array('access xml exchange'),
        'file' => 'includes/xml_exchange.admin.inc',
        'weight' => 1,
        'type' => MENU_LOCAL_TASK,
        'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    );
    $items['admin/content/xml_exchange/%xml_exchange_menu/edit'] = array(
        'title' => t('Edit'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('xml_exchange_admin_edit_feed_form', 3),
        'access callback' => 'user_access',
        'access arguments' => array('access xml exchange'),
        'file' => 'includes/xml_exchange.admin.inc',
        'weight' => 1,
        'type' => MENU_LOCAL_TASK,
        'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    );
    $items['admin/content/xml_exchange/%xml_exchange_menu/delete'] = array(
        'title' => t('Delete'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('xml_exchange_admin_delete_feed_form', 3),
        'access callback' => 'user_access',
        'access arguments' => array('access xml exchange'),
        'file' => 'includes/xml_exchange.admin.inc',
        'weight' => 1,
        'type' => MENU_LOCAL_TASK,
        'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    );
    return $items;
}

/**
 * Menu loader callback. Load a webform node if the given nid is a webform.
 */
function xml_exchange_menu_load($id) {
    if (!is_numeric($id)) {
        return FALSE;
    }
    $feed = db_select('xml_exchange_loadings', 'x')
            ->fields('x')
            ->condition('id', $id, '=')
            ->execute()
            ->fetch();
    if (!$feed)
        return FALSE;
    return $feed;
}

/**
 * Implements hook_admin_paths().
 */
function xml_exchange_admin_paths() {
    if (variable_get('node_admin_theme')) {
        return array(
            'admin/content/xml_exchange/add' => TRUE,
            'admin/content/xml_exchange/*' => TRUE,
            'admin/content/xml_exchange/*/edit' => TRUE,
            'admin/content/xml_exchange/*/exec' => TRUE,
            'admin/content/xml_exchange/*/delete' => TRUE,
        );
    }
}

/**
 * Implements hook_perm().
 */
function xml_exchange_permission() {
    return array(
        'access xml exchange' => array(
            'title' => t('Access to execute xml exchanges'),
        )
    );
}

/**
 * Implements hook_theme().
 */
function xml_exchange_theme() {
    return array('xml_exchange_admin_content' => array(
            'variables' => array('nodes' => NULL),
            'file' => 'includes/xml_exchange.admin.inc',
        ),
        array(
            'xml_exchange_admin_edit_feed' => array(
                'variables' => array('feed' => NULL, 'form' => NULL),
                'file' => 'includes/xml_exchange.admin.inc',
            )
        ),
        array(
            'xml_exchange_admin_edit_feed_form' => array(
                'render element' => 'form',
                'file' => 'includes/xml_exchange.admin.inc',
            )
        ),
        array(
            'xml_exchange_admin_delete_feed' => array(
                'variables' => array('feed' => NULL, 'form' => NULL),
                'file' => 'includes/xml_exchange.admin.inc',
            )
        ),
        array(
            'xml_exchange_admin_delete_feed_form' => array(
                'render element' => 'form',
                'file' => 'includes/xml_exchange.admin.inc',
            )
        ),
    );
}

function xml_exchange_exec_item($item, $scheme, $node_fields, $feed, &$context) {
    $item = json_decode($item);
    $check_exists = db_select('node', 'n');
    $check_exists->leftJoin('field_data_field_aktual', 'a', 'n.nid = a.entity_id');
    $check_exists->leftJoin('field_data_field_ndv_id', 'o', 'n.nid = o.entity_id');
    $check_exists->fields('n', array('nid'));
    $check_exists->isNull('a.field_aktual_value')
            ->condition('o.field_ndv_id_value', _xml_exchange_get_data_from_item_field($item, '@attributes.internal-id'));
    if ($exists = $check_exists->execute()->fetchField()) {
        $node = node_load($exists);
        return 0;
    } else {
        $node = new stdClass();
        $node->type = $feed->type;
        $node->status = 1;
        $node->uid = 1;
        $datetime = new DateTime();
        $node->title = $datetime->format('Y/m/d H:i:s') . ' ' . $feed->link;
        $node->promote = 1;
        $timestamp = time();
        $node->created = $timestamp;
        $node->timestamp = $timestamp;
        $node->sticky = 0;
        $node->format = 3;
        $node->language = 'und';
        $node->comment = 0;
        $node->revision = 0;
        foreach ($node_fields AS $name => $field) {
            if (isset($scheme[$name . '_set']) && $scheme[$name . '_set']['field']) {
                $value = ($scheme[$name . '_set']['field'] == 'def') ? $scheme[$name . '_set']['predefined'] : _xml_exchange_get_data_from_item_field($item, $scheme[$name . '_set']['field']);
                if (!empty($value)) {
                    switch ($scheme[$name . '_set']['type']) {
                        case 'php':
                            $snippet = preg_replace('/\{([\w\.]*)\}/', '_xml_exchange_get_data_from_item_field($item, "$1")', $scheme[$name . '_set']['php']);
                            $node->{$name}[$node->language][] = array('value' => eval($snippet));
                            break;
                        case 'linktoimg':
                            $data = file_get_contents($value);
                            if ($data) {
                                $ext = substr($value, strripos($value, '.'));
                                $file = file_save_data($data, 'public://' . substr($value, strripos($value, '/') + 1));
                                if ($ext == '.jpg')
                                    $ext = '.jpeg';
                                db_update('file_managed')
                                        ->fields(array('filemime' => 'image/' . substr($ext, 1)))
                                        ->condition('fid', $file->fid, '=')
                                        ->execute();
                                $node->{$name}[$node->language][] = array('fid' => $file->fid);
                            }
                            break;
                        case 'texttodropdown':
                            $field_info = field_info_field($name);
                            foreach ($field_info['settings']['allowed_values'] AS $k => $v) {
                                similar_text(mb_strtolower($value), mb_strtolower($v), &$proc);
                                if ($proc > 90)
                                    $node->{$name}[$node->language][] = array('value' => $k);
                            }
                            break;
                        case 'texttoterm':
                            $query = db_select('taxonomy_term_data', 't');
                            $query->join('taxonomy_term_hierarchy', 'h', 't.tid = h.tid');
                            $query->fields('t', array('tid'))
                                    ->condition('t.vid', $scheme[$name . '_set']['texttoterm'])
                                    ->condition('t.name', '%' . $value . '%', 'LIKE')
                                    ->orderBy('h.parent', 'DESC');
                            $tid = $query->execute()->fetchField();
                            if ($tid) {
                                $node->{$name}[$node->language][] = array('tid' => $tid);
                            }
                            break;
                        default:
                            $info = field_info_field($name);
                            if ($info['type'] == 'text_with_summary') {
                                $node->{$name}[$node->language][0]['value'] = $value;
                                $node->{$name}[$node->language][0]['summary'] = text_summary(strip_tags($value), '<p>');
                                $node->{$name}[$node->language][0]['format'] = 'full_html';
                            } else {
                                $node->{$name}[$node->language][] = array('value' => $value);
                            }
                            break;
                    }
                }
            }
        }
        node_save($node);
        $message = t($node->title . ' uploaded or updated');
    }
    $context['results'][] = 'Some';
    // Сообщение выводимое под прогресс баром после окончания текущей операции
    $context['message'] = $message;
}

function xml_exchange_admin_exec_feed_batch_form_submit_finished($success, $results, $operations) {
    if ($success) {
        drupal_set_message(t('@count materials uploaded or updated'), array('@count' => count($results)));
    } else {
        drupal_set_message(t('Some problem occured'), 'error');
    }
}
